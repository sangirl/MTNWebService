//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 이 소스 코드가 Microsoft.VSDesigner, 버전 4.0.30319.42000에서 자동으로 생성되었습니다.
// 
#pragma warning disable 1591

namespace MTNClient.WebServiceRef {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebService1Soap", Namespace="http://mtngirl.com/")]
    public partial class WebService1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SelectCertificatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertCertificatesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService1() {
            this.Url = global::MTNClient.Properties.Settings.Default.MTNClient_WebServiceRef_WebService1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SelectCertificatesCompletedEventHandler SelectCertificatesCompleted;
        
        /// <remarks/>
        public event InsertCertificatesCompletedEventHandler InsertCertificatesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mtngirl.com/SelectCertificates", RequestNamespace="http://mtngirl.com/", ResponseNamespace="http://mtngirl.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable SelectCertificates(string certs_drive) {
            object[] results = this.Invoke("SelectCertificates", new object[] {
                        certs_drive});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void SelectCertificatesAsync(string certs_drive) {
            this.SelectCertificatesAsync(certs_drive, null);
        }
        
        /// <remarks/>
        public void SelectCertificatesAsync(string certs_drive, object userState) {
            if ((this.SelectCertificatesOperationCompleted == null)) {
                this.SelectCertificatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectCertificatesOperationCompleted);
            }
            this.InvokeAsync("SelectCertificates", new object[] {
                        certs_drive}, this.SelectCertificatesOperationCompleted, userState);
        }
        
        private void OnSelectCertificatesOperationCompleted(object arg) {
            if ((this.SelectCertificatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectCertificatesCompleted(this, new SelectCertificatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mtngirl.com/InsertCertificates", RequestNamespace="http://mtngirl.com/", ResponseNamespace="http://mtngirl.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool[] InsertCertificates(Certificate[] list) {
            object[] results = this.Invoke("InsertCertificates", new object[] {
                        list});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void InsertCertificatesAsync(Certificate[] list) {
            this.InsertCertificatesAsync(list, null);
        }
        
        /// <remarks/>
        public void InsertCertificatesAsync(Certificate[] list, object userState) {
            if ((this.InsertCertificatesOperationCompleted == null)) {
                this.InsertCertificatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertCertificatesOperationCompleted);
            }
            this.InvokeAsync("InsertCertificates", new object[] {
                        list}, this.InsertCertificatesOperationCompleted, userState);
        }
        
        private void OnInsertCertificatesOperationCompleted(object arg) {
            if ((this.InsertCertificatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCertificatesCompleted(this, new InsertCertificatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mtngirl.com/")]
    public partial class Certificate {
        
        private string certs_nameField;
        
        private string certs_typeField;
        
        private System.Nullable<System.DateTime> certs_not_afterField;
        
        private string certs_driveField;
        
        private string certs_caField;
        
        private string certs_full_filenameField;
        
        private byte[] certs_byte_derField;
        
        private byte[] certs_byte_keyField;
        
        /// <remarks/>
        public string certs_name {
            get {
                return this.certs_nameField;
            }
            set {
                this.certs_nameField = value;
            }
        }
        
        /// <remarks/>
        public string certs_type {
            get {
                return this.certs_typeField;
            }
            set {
                this.certs_typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> certs_not_after {
            get {
                return this.certs_not_afterField;
            }
            set {
                this.certs_not_afterField = value;
            }
        }
        
        /// <remarks/>
        public string certs_drive {
            get {
                return this.certs_driveField;
            }
            set {
                this.certs_driveField = value;
            }
        }
        
        /// <remarks/>
        public string certs_ca {
            get {
                return this.certs_caField;
            }
            set {
                this.certs_caField = value;
            }
        }
        
        /// <remarks/>
        public string certs_full_filename {
            get {
                return this.certs_full_filenameField;
            }
            set {
                this.certs_full_filenameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] certs_byte_der {
            get {
                return this.certs_byte_derField;
            }
            set {
                this.certs_byte_derField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] certs_byte_key {
            get {
                return this.certs_byte_keyField;
            }
            set {
                this.certs_byte_keyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SelectCertificatesCompletedEventHandler(object sender, SelectCertificatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectCertificatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectCertificatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void InsertCertificatesCompletedEventHandler(object sender, InsertCertificatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertCertificatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertCertificatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591